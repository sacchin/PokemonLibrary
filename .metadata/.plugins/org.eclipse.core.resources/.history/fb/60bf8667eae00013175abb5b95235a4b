package com.gmail.sacchin.pockemonbattletools.http;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import net.vvakame.util.jsonpullparser.JsonFormatException;

import com.gmail.sacchin.pockemonbattletools.entity.Test;
import com.gmail.sacchin.pockemonbattletools.entity.TestGen;

import android.util.Log;

public class PGLGetter implements Runnable {

	private final static String URL = "http://3ds.pokemon-gl.com/frontendApi/gbu/getSeasonPokemonDetail";
	
	public String doPost(int pockemonNo) {
		StringBuilder result = new StringBuilder();
		
	    DefaultHttpClient client = new DefaultHttpClient();
	    HttpPost method = new HttpPost(URL);
	    method.setHeader("charset", "UTF-8");
	    method.setHeader("Referer", "http://3ds.pokemon-gl.com/battle/");
	 
	    // リクエストパラメータの設定
	    List<NameValuePair> params = new ArrayList<NameValuePair>();	    
	    params.add(new BasicNameValuePair("languageId", "1"));
	    params.add(new BasicNameValuePair("seasonId", "3"));
	    params.add(new BasicNameValuePair("battleType", "0"));
	    params.add(new BasicNameValuePair("timezone", "JST"));
	    params.add(new BasicNameValuePair("pokemonId", pockemonNo + "-0"));
//	    params.add(new BasicNameValuePair("displayNumberWaza", "10"));
//	    params.add(new BasicNameValuePair("displayNumberTokusei", "10"));
//	    params.add(new BasicNameValuePair("displayNumberSeikaku", "10"));
//	    params.add(new BasicNameValuePair("displayNumberItem", "10"));
//	    params.add(new BasicNameValuePair("displayNumberLevel", "10"));
//	    params.add(new BasicNameValuePair("displayNumberPokemonIn", "10"));
	    try {
	        method.setEntity(new UrlEncodedFormEntity(params, "utf-8"));
	        HttpResponse response = client.execute(method);
	        int status = response.getStatusLine().getStatusCode();
	        
	        switch (response.getStatusLine().getStatusCode()) {
	        case HttpStatus.SC_OK:
	        	Log.d("posttest", "レスポンス取得に成功");
				BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));
				while(true){
					String temp = reader.readLine();
					if(temp == null){
						break;
					}
					result.append(temp);
				}
        	return EntityUtils.toString(response.getEntity(), "UTF-8");

	        case HttpStatus.SC_NOT_FOUND:
	        	Log.d("posttest", "データが存在しない");

	        default:
	        	Log.d("posttest", "通信エラー");
	        }
	        return "Status:" + status;

	    } catch (ClientProtocolException e) {
            return "Error:" + e.getStackTrace();
	    } catch (IOException e) {
            return "Error:" + e.getStackTrace();
	    }
	}

	@Override
	public void run() {
		String jsonStr = doPost(303);
		if(jsonStr != null && !jsonStr.isEmpty()){
			Log.e("result", "" + jsonStr.length());
			try {
				Test t = TestGen.get(jsonStr);
			} catch (IOException e) {
				e.printStackTrace();
			} catch (JsonFormatException e) {
				e.printStackTrace();
			}
		}
	}
}
